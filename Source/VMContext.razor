@implements IDisposable
@inject IVMProxy vm
@typeparam TState

<d-vm-context @ref="vm.ElementRef" vm="@VM" options="@Options">
    @ChildContent
</d-vm-context>

@code {
   /// <summary>
   /// Name of the view model to connect with.
   /// </summary>
   [Parameter] public string VM { get; set; }

   /// <summary>
   /// Configuration options that can be sent along with request to connect to a server-side view model.
   /// </summary>
   [Parameter] public VMConnectOptions Options { get; set; }

   /// <summary>
   /// Occurs on receiving state update from the server-side view model.
   /// </summary>
   [Parameter] public Action<TState> OnStateChange { get; set; }

   /// <summary>
   /// Occurs on receiving a custom event from a DotNetify-Element's web component.
   /// </summary>
   [Parameter] public Action<ElementEvent> OnElementEvent { get; set; }

   [Parameter] public RenderFragment ChildContent { get; set; }

   private readonly string[] DomSelectorPrefixes = new string[] { "#", ".", "[" };

   protected override async Task OnAfterRenderAsync(bool firstRender)
   {
       await vm.HandleStateChangeAsync<TState>(state => OnStateChange?.Invoke(state));
       await vm.HandleElementEventAsync(args => HandleElementEvent(args));
   }

   public void Dispose()
   {
       vm.Dispose();
   }

   public async Task DispatchAsync(string propertyName, object propertyValue = null)
   {
       await vm.DispatchAsync(propertyName, propertyValue);
   }

   public void HandleEvent(ElementReference elementRef, string eventName, Action eventHandler)
   {
       vm.HandleDomEventAsync<object>(eventName, elementRef, e => eventHandler?.Invoke());
   }

   public void HandleEvent<TEventArg>(ElementReference elementRef, string eventName, Action<TEventArg> eventHandler)
   {
       vm.HandleDomEventAsync<TEventArg>(eventName, elementRef, e => eventHandler?.Invoke(e));
   }

   private void HandleElementEvent(ElementEvent args)
   {
       OnElementEvent?.Invoke(args);
   }
}